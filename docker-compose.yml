version: '3.8'

services:
  # Main ChoyNewsBot application
  choynews-bot:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: choynews-bot
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - choynews_cache:/app/data/cache
    networks:
      - choynews-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "python", "-c", "from utils.config import Config; Config().validate()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: choynews-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-choynews_redis}
    volumes:
      - redis_data:/data
    networks:
      - choynews-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # PostgreSQL for advanced data storage (optional upgrade from SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: choynews-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-choynews}
      POSTGRES_USER: ${POSTGRES_USER:-choynews}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-choynews_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./tools/sql:/docker-entrypoint-initdb.d
    networks:
      - choynews-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-choynews}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy for web interface (future feature)
  nginx:
    image: nginx:alpine
    container_name: choynews-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./data/ssl:/etc/nginx/ssl:ro
    networks:
      - choynews-network
    depends_on:
      - choynews-bot

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: choynews-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - choynews-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: choynews-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - choynews-network
    depends_on:
      - prometheus

# Networks
networks:
  choynews-network:
    driver: bridge

# Volumes
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  choynews_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
